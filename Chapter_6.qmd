---
title: "Chapter 6 Notes"
prefer-html: true
format: 
  docx: 
    toc: true
    highlight-style: arrow
    fig-format: retina
    fig-dpi: 300
    fig-height: 6
    fig-width: 6
editor: visual
execute:
  echo: fenced
  error: true
  output: true
editor_options: 
  chunk_output_type: inline
---

# Chapter 6: Mapping Census data with R

```{r setup}
library(tidycensus)
library(tidyverse)
library(tmap)
library(mapview)
library(leaflet)
library(mapboxapi)
library(ggiraph)
library(scales)
library(mapdeck)
library(patchwork)
library(shiny)
library(htmlwidgets)
library(sf)
```

-   This chapter shows how to map Census data by using linked `geometry` parameters.

    -   We review static mapping in **ggplot2** and **tmap**

    -   We then review interactive mapping in **mapview** and **Leaflet**

## 6.1 Using geometry in tidycensus

-   `get_acs()`, `get_decennial()`, and `get_estimates()` have a `geometry` parameter

    -   when set to `TRUE`, **tigris** is called by the functions to download associated spatial data alongside the census data

```{r dc_med_inc}
options(tigris_use_cache = TRUE)

dc_income <- get_acs(
  geography = "tract",
  variables = "B19013_001",
  state = "DC",
  year = 2020,
  geometry = TRUE
)

dc_income
```

### Basic mapping of sf objects with `plot()`

-   we can visualize the estimates with plot using a bracketed column name call

```{r}
plot(dc_income["estimate"])
```

-   this returns a simple map of income variation

## 6.2 Map-making with ggplot2 and geom_sf

-   **ggplot2**'s use of `geom_sf()` allows for the development of custom spatial data visuals

### Choropleth mapping

-   Choropleth maps are very common in visualizing statistics over enumeration units

-   Below we will use **tidycensus** and **tigris** to prepare a full national map

```{r}
us_median_age <- get_acs(
  geography = "state",
  variables = "B01002_001",
  year = 2019,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m"
) %>% 
  shift_geometry()

plot(us_median_age$geometry)
```

-   we can then stylize the plot in **ggplot2**

```{r}
ggplot(data = us_median_age, aes(fill = estimate)) +
  geom_sf()
```

### Customizing ggplot2 maps

-   we have a few other tools that allow for more creative and meaningful plot construction

    -   `scale_fill_distiller()` allows us to pull down palettes from ColorBrewer

    -   `labs()` can add titles, caption(s), and a better legend label

    -   `theme_void()` removes background and gridlines from the plot area

```{r}
ggplot(data = us_median_age, aes(fill = estimate)) +
  geom_sf() +
  scale_fill_distiller(palette = "RdPu",
                       direction = 1) +
  labs(title = "Median Age by State, 2019",
       caption = "Data source: 2019 1-year ACS, US Census Bureau",
       fill = "ACS estimate") +
  theme_void()
```

## 6.3 Map-making with tmap

-   **tmap** is more specifically developed for thematic mapping than **ggplot2**

-   We will use `get_decennial()` to map race data by Census tract in Hennepin County, Minnesota

```{r}
hennepin_race <- get_decennial(
  geography = "tract",
  state = "MN",
  county = "Hennepin",
  variables = c(
    Hispanic = "P2_002N",
    White = "P2_005N",
    Black = "P2_006N",
    Native = "P2_007N",
    Asian = "P2_008N"
  ),
  summary_var = "P2_001N",
  year = 2020,
  geometry = TRUE
) %>% 
  mutate(percent = 100 * (value / summary_value))

hennepin_race
```

-   note that the data is returned in long form/"tidy" form

### Choropleth maps with tmap

-   like **ggplot2**, **tmap** uses a layer syntax appended with `+` signs

```{r}
hennepin_black <- filter(hennepin_race,
                         variable == "Black")

tm_shape(hennepin_black) +
  tm_polygons()
```

-   the default view is not classified; to graduate the fill colors we can do so using `tm_fill()`

```{r}
tm_shape(hennepin_black) +
  tm_polygons(col = "percent")
```

-   **tmap** doesn't create a continuous gradient, but rather breaks items into classes by a designated classification scheme

    -   the default classification scheme is `"pretty"` which - (per `?pretty`) - breaks the range of values into equally spaced classes demarcated by "equally spaced 'round' values"

    -   this classification scheme is sensitive to the data's underlying distribution

```{r}
hist(hennepin_black$percent)
```

-   We can use an alternative classification scheme like `"quantile"` which breaks the data down such that each class contains a (near) equal number of observations

```{r}
tm_shape(hennepin_black) +
  tm_polygons(col = "percent",
              style = "quantile",
              n = 5,
              palette = "Purples",
              title = "2020 US Census") +
  tm_layout(title = "Percent Black\nby Census tract",
            frame = FALSE,
            legend.outside = TRUE)
```

-   We may also use the commonly-selected Jenks algorithm which looks for meaningful breaks.

    -   we can use `legend.hist = TRUE` to follow classification method changes across plots

```{r}
tm_shape(hennepin_black) +
  tm_polygons(col = "percent",
              style = "jenks",
              n = 5,
              palette = "Purples",
              title = "2020 US Census",
              legend.hist = TRUE) +
  tm_layout(title = "Percent Black\nby Census tract",
            frame = FALSE,
            legend.outside = TRUE,
            bg.color = "grey70",
            legend.hist.width = 5,
            fontfamily = "Verdana")
```

### Adding reference elements to a map

-   We often include several reference elements with a map, including:

    -   basemap

    -   north arrow

    -   scale bar

-   A quick way of getting a **tmap**-compatible basemap is **rosm**

-   We may also use pre-designed or custom-designed base maps from Mapbox using **mapboxapi**

```{r}
# Non-functional code because I don't want to give Mapbox my payment info
# mb_access_token("NA")

# hennepin_tiles <- get_static_tiles(
#   location = hennepin_black,
#   zoom = 10,
#   style_id = "light-v9",
#   username = "mapbox"
# )
```

-   when defining a basemap for choropleth maps, use muted monochrome designs to avoid drowning out choropleth colors

-   basemaps are layered in tmap using `tm_rgb()`, which plots a given raster

    -   to see a basemap, add transparency to choropleth using the `alpha` argument

    -   `tm_scale_bar()` adds a scale bar

    -   `tm_compass()` adds a north arrow

    -   `tm_credits()` lets one credit data sources and basemap sources

```{r}
## Note that the basemap is commented out due to lack of a Mapbox account
# tm_shape(hennepin_tiles) +
#   tm_rgb() +
tm_shape(hennepin_black) +
  tm_polygons(col = "percent",
              style = "jenks",
              n = 5,
              palette = "Purples",
              title = "2020 US Census",
              alpha = 0.7) +
  tm_layout(title = "Percent Black\nby Census tract",
            legend.outside = TRUE,
            fontfamily = "Verdana") +
  tm_scale_bar(position = c("left", "bottom")) +
  tm_compass(position = c("right", "top")) #+
  # tm_credits("(c) Mapbox, OSM",
  #           bg.color = "white",
  #           position = c("RIGHT", "BOTTOM"))
```

-   `position` arguments allow for useful positioning

    -   using all caps will bring elements closer to flush with the map frame

### Choosing a color palette

### Alternative map types with tmap

## 6.4 Cartographic workflows with non-Census data

### National election mapping with tigris shapes

### Understanding and working with ZCTAs

## 6.5 Interactive mapping

### Interactive mapping with Leaflet

### Alternative approaches to interactive mapping

## 6.6 Advanced examples

### Mapping migration flows

### Linking maps and charts

### Reactive mapping with Shiny

## 6.7 Working with software outside of R for cartographic projects

### Exporting maps from R

### Interoperability with other visualization software

## 6.8 Exercises
