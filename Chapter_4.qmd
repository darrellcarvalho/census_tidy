---
title: "Chapter 4 Notes"
format: 
  docx: 
    toc: true
    highlight-style: arrow
    fig-format: retina
    fig-dpi: 300
    fig-height: 6
    fig-width: 6
editor: visual
execute:
  echo: fenced
  error: true
  output: true
editor_options: 
  chunk_output_type: inline
---

# Chapter 4: Exploring US Census data with visualization

-   **ggplot2** by Hadley Wickham is the core visualization framework for **tidyverse**

-   Chapter goes over the following chart types:

    -   faceted ("small multiples")

    -   population pyramids

    -   Margin of Error plots

-   Chapter goes over **plotly** for interactive vizualization

```{r setup}
library(tidycensus)
library(tidyverse)
library(scales)
```

## 4.1 Basic Census visualization with ggplot2

-   visualization is the examination of patterns and trends in data graphically

-   visualization is especially key for exploratory analysis

-   Below we'll pull in the data we'll work through - 2020 5-year Georgia median household income and median age by county, in a wide table format

```{r mhi-georgia}
ga_wide <- get_acs(
  geography = "county",
  state = "Georgia",
  variables = c(medinc = "B19013_001",
                medage = "B01002_001"),
  output = "wide",
  year = 2020
)
ga_wide
```

### Getting started with ggplot2

1.  Initalize **ggplot2** visualizations as a plot object using `ggplot()`

    -   First argument is a dataset to be visualized

    -   Second argument is default `aes()` *(aesthetic)* mappings for the plot

        -   mappings can be applied to elements such as data axes, fill, color, etc.

After initializing the plot object, we layer plot elements onto the object

-   Main factor here is the `geom`, determining the chart type to be used.

    -   `geom_bar()` - bar plots

    -   `geom_line()` - line plots

    -   `geom_point()` - point plots

    -   `geom_histogram()` - histograms

    -   `geom_boxplot()` - box and whisker plots

-   To add a geom layer, use the `+` operator

#### Histograms

We'll start with a histogram to look at data distribution

```{r georgia-histo}
options(scipen = 999) # optional call; avoid scientific notation

ggplot(ga_wide, aes(x = medincE)) +
  geom_histogram()
```

-   A histogram displays the distribution of data values

    -   the horizontal axis represents the range of values from least to greatest

    -   the vertical axis represents the count, or number quantity of data points with a given value

        -   a given range of values is 'binned' into a box whose height represent the count of values that may be classed in said box

        -   by default, **ggplot2** organizes the data values into 30 bins

            -   this can be changed via the `bins` parameter in `geom_histogram()`, demonstrated below

```{r georgia-15bin-histo}
ggplot(ga_wide, aes(x = medincE)) +
  geom_histogram(bins = 15)
```

#### Box-and-Whisker Plot

-   The box-and-whisker plot is a common alternative to the histogram

    -   The central box of a box plot shows the *interquartile range (IQR)*Â or those values between the 25th and 75th percentile

        -   The central line of the box represents the distribution median

    -   the *whiskers* demonstrate values outside the IQR as follows:

        -   they may stretch to the min/max values of the distribution, OR

        -   they may represent 1.5x the IQR in either, or both, directions

    -   values plotted as points plotted beyond the whiskers are *outliers*

```{r georgia-boxplot}
ggplot(ga_wide, aes(y = medincE)) +
  geom_boxplot()
```

-   in the above boxplot:

    -   the `aes()` call maps the plot to the y axis, creating a vertical boxplot

    -   the lower whiskers stretches to the minimum value

    -   the upper whiskers stretches to 1.5x the IQR

    -   we see several points plotted as outliers above the upper bound

#### (Scatter plots) Visualizing multivariate relationships

-   We may want to explore/visualize interrelationship between two (or more) variables

-   with two numeric variables, we may explore relationships using *scatter plots*

    -   one column of values is mapped to the X-axis

    -   the other is mapped to the Y-axis

    -   `geom_point()` makes scatter plots

        -   two columns are needed for the `aes() mapping`

```{r georgia-medage-medinc-scatter}
ggplot(ga_wide, aes(x = medageE, y = medincE)) +
  geom_point()
```

-   Sometimes, a plot like above clearly demonstrates the existence of a relationship between variables (*correlation)*

-   Sometimes, the plot fails to make such correlation immediately clear

    -   in these cases, we may add further elements to clarify

    -   `geom_smooth()`, for instance, draws a fitted line representing the relationship between the plotted columns

        -   `method = "lm"` uses the linear model to fit a line

        -   `method = "loess"` uses Local Polynomial Regression Fitting to fit smoothed relationships

```{r georgia-medage-medinc-scatter-lm-smooth}
ggplot(ga_wide, aes(x = medageE, y = medincE)) +
  geom_point() +
  geom_smooth(method = "lm")
```

-   the regression line has a light downward movement from left to right, implying somewhat of a negative relationship between the two variables

    -   we might interpret this as median household income declining slightly as median age increases

## 4.2 Customizing ggplot2 visualizations

-   **ggplot2** provides useful and attractive defaults, but analysts will want to customize visualizations for presenting to diverse audiences

-   The subsection follows an example of visualization prep for data showing percent of commuters who use urban public transit

    -   we take this data from 2019 1-year ACS Data Profile

    -   The variable we use is `DP03_0021P` - "Percent!!COMMUTING TO WORK!!Workers 16 years and over!!Public transportation (excluding taxicab)"

    -   We'll find the 20 largest metropolitan areas by pop using `slice_max()`

```{r metro-pt-commute}
metros <- get_acs(
  geography = "cbsa",
  variables = "DP03_0021P",
  summary_var = "B01003_001",
  survey = "acs1",
  year = 2019
) %>% 
  slice_max(summary_est, n = 20)
```

-   data returned is 20x7, with two extra columns from the `summary_var` and its associated `summary_moe`, and the rows being the `slice_max` return

-   below, we create a bar plot comparing public transit commute share between metro areas

```{r initial-commute-chart}
ggplot(metros, aes(x = NAME, y = estimate)) +
  geom_col()
```

-   the above plot is hard to interpret without fine-tuning the formatting

    -   x-axis overlap, making reading impossible

    -   axis titles are not intuitive

    -   data isn't sorted

### Improving legibility

-   we can perform the above cleaning

    -   **ggplot2** works with **magrittr** piping and **tidyverse** functions, meaning we can combine manipulation and visualization tasks

1.  We will format `NAME` to be more intuitive using **stringr** info nested in `mutate()` calls - `str_remove()` lets us use regex to remove unneeded parts of the `NAME` text for each area - the mutate calls are piped into `ggplot()` and `ggplot()` infers the dataset from the preceding pipe chains
2.  We will improve legibility by putting metro name on y-axis and ACS estimate on x-axis
3.  We will order data in descending order of estimated values using `reorder()` inside `aes()`
4.  We plot it as a column plot

```{r cleaned-commute-chart-a}
metros %>% 
  mutate(NAME = str_remove(NAME, "-.*$")) %>% 
  mutate(NAME = str_remove(NAME, ",.*$")) %>% 
  ggplot(aes(y = reorder(NAME, estimate), x = estimate)) +
  geom_col()
```

-   the above is much cleaner, but we need to fix the labels to make the chart interpretable

    -   We can finish cleaning up by using `labs()` to specify labels

        -   In this instance, we will include a title label, a subtitle label, we will leave the y axis label empty, and we will add a caption label containing data credits

    -   We can also include themes (in this case, using `theme_minimal()`

```{r final-commute-chart}
metros %>% 
  mutate(NAME = str_remove(NAME, "-.*$")) %>% 
  mutate(NAME = str_remove(NAME, ",.*$")) %>% 
  ggplot(aes(y = reorder(NAME, estimate), x = estimate)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Public transit commute share",
       subtitle = "2019 1-year ACS estimates",
       y = "",
       x = "ACS estimate",
       caption = "Source: ACS Data Profile variable DP03_0021P via the tidycensus R package")
```

### Custom styling of ggplot2 charts

**ggplot2** maintains a wide scope for customization. Below, we demonstrate several style changes to color, transparency, font, and tick labels.

```{r customized-commute-chart}
library(scales)


metros %>% 
  mutate(NAME = str_remove(NAME, "-.*$")) %>% 
  mutate(NAME = str_remove(NAME, ",.*$")) %>% 
  ggplot(aes(y = reorder(NAME, estimate), x = estimate)) +
  geom_col(color = "navy", fill = "navy",
           alpha = 0.5, width = 0.85) +
  theme_minimal(base_size = 12, base_family = "Verdana") +
  scale_x_continuous(labels = label_percent(scale = 1)) +
  labs(title = "Public transit commute share",
       subtitle = "2019 1-year ACS estimates",
       y = "",
       x = "ACS estimate",
       caption =  "Source: ACS Data Profile variable DP03_0021P via the tidycensus R package")
```

-   The above code used the following modifications:

    -   `geom_cols()` had `aes()` mappings modified locally, rather than at the global level of the object initialization

        -   the bar was given a `color` (the outline color) and `fill` (the fill color)

        -   transparency was modified using `alpha` argument

        -   `width = 0.85` increased the space between bars by reducing the visual width of each bar to 85% of the default value

    -   `theme_minimal()` uses the `base_size` and `base_family` parameters, respectively

        -   `base_size` controls the font size of plot elements, defaulting to 11

        -   `base_family` designates the font family to use

            -   in this case, the "Verdana" plot is used

            -   any font family accessible from the operating system may be used

            -   Check installed fonts with `systemfonts::system_fonts()`

    -   `scale_x_continuous()` gives us a customized X-axis

        -   `labels` parameter can take a function or formula to programmatically style tick labels

        -   **scales** packages has formatting functions to apply:

            -   `label_percent()`

            -   `label_dollar()`

            -   `label_date()`

### Exporting data visualizations from R

-   Once you get the design you want, you have several ways of exporting

    -   **Export \> Save as Image** will let you save individual plots

    -   `ggsave()` saves the last plot generated to an image file stored in a given directory (working directory by default)

```{r export-demo-1}
ggsave("metro_transit.png")
```

-   `ggsave()` has a lot of options:

    -   `width` and `height` can control the image dimensions

    -   `dpi` controls image resolution (dots per inch)

    -   `path` specifies where to save the image

```{r export-demo-2}
ggsave(
  filename = "metro_transit.png",
  path = "./images",
  width = 8,
  height = 5,
  units = "in",
  dpi = 300
)
```

## 4.3 Visualizing margins of error

-   we often want to visualize margins of error to get a sense of uncertainty around an estimate

    -   this is especially important when making comparative analyses between small geographies

### Data setup

-   We will look at median household income for Main Counties from the 2016-2020 ACS

```{r maine-setup}
maine <- get_decennial(
  state = "Maine",
  geography = "county",
  variables = c(totalpop = "P1_001N"),
  year = 2020
) %>% 
  arrange(desc(value))
maine
```

-   Maine has 16 counties

    -   these range in population from a max of 303,069 to a min of 16,800

    -   smaller counties will have relatively larger margins of error

-   We will compare median household incomes to demonstrate

    1.  get the data

    2.  clean up `NAME` with `str_remove()` to remove redundant info

```{r income-cleanup}
maine_income <- get_acs(
  state = "Maine",
  geography = "county",
  variables = c(hhincome = "B19013_001"),
  year = 2020
) %>% 
  mutate(NAME = str_remove(NAME, " County, Maine"))

maine_income
```

3.  Now we style rank the counties and stylize the plot

```{r mhhincome-maine-rank}
ggplot(maine_income,
       aes(x = estimate,
           y = reorder(NAME, estimate))) + # take counties in NAME and reorder by estimate values; note we can use -estimate to invert the order
  geom_point(size = 3,
             color = "darkgreen") +
  labs(title = "Median household income",
       subtitle = "Counties in Maine",
       x = "",
       y = "ACS estimate") +
  theme_minimal(base_size = 12.5) +
  scale_x_continuous(labels = label_dollar()) # format label as dollars
```

-   The chart seems to hint at a Wealthiest \> Poorest ranking, but note that it is more nuanced than our Metro example

    -   The Metro examples all had large populations, with smaller relative MOEs

    -   these smaller geographies may have more uncertainty due to the smaller population to sample from

### Using error bars for margins of error

-   given how close many of the values are, margins of error may prevent misleading interpretation for close values

```{r maine-income-moes}
maine_income %>% 
  arrange(desc(moe))
```

-   there is a wide range of MOEs

    -   note areas where MOE are larger than the differences between adjacently ranked estimates

        -   this means the ranking has uncertainty worth noting

    -   this means the dot visualization can be misleading, and we should pursue alternatives

-   So we'll add some error bars

    -   `geom_errorbarh()` plots horizontal bars around the points, showing the moe range around the value

    -   where error bars overlap in whole or in part, this should be interpreted as having enough uncertainty that alternative rankings may be just as viable

```{r maine-error-bars}
ggplot(maine_income,
       aes(x = estimate,
           y = reorder(NAME, estimate))) + # take counties in NAME and reorder by estimate values; note we can use -estimate to invert the order
  geom_errorbarh(aes(xmin = estimate - moe, xmax = estimate + moe)) +
  geom_point(size = 3,
             color = "darkgreen") +
  labs(title = "Median household income",
       subtitle = "Counties in Maine",
       x = "",
       y = "ACS estimate") +
  theme_minimal(base_size = 12.5) +
  scale_x_continuous(labels = label_dollar()) # format label as dollars
```

## 4.4 Visualizing ACS estimates over time

-   line charts are often used to visualize time-series information for analyzing change over time

    -   **ggplot2** provides the `geom_line()` geom for line plots

-   This demonstrates the use of 1-year ACS data for each year 2005-2019

-   We look at median home value in Deschutes County, Oregon within the years 2005-2019, drawing from the 1-year ACS data for each year using the following steps:

1.  We set up a named vector of years

2.  we use `map_dfr()` to iterate over the vector of years, pulling down the ACS data we want for each year

    ```{r iterate-over-years}
    years <- 2005:2019
    names(years) <- years

    deschutes_value <- map_dfr(years, ~{
      get_acs(
        geography = "county",
        variables = "B25077_001",
        state = "OR",
        county = "Deschutes",
        year = .x,
        survey = "acs1"
      )
    }, .id = "year")
    ```

3.  We can now plot it using `geom_line()`

```{r deschutes-median-home-value-initial-plot}
ggplot(deschutes_value, 
       aes(x = year, y = estimate, group = 1)) + 
  geom_line() + 
  geom_point()
```

4.  Then we can clean the chart up, and add a margin of error ribbon to visualized uncertainty around the values

```{r final-median-home-value-chart}
ggplot(deschutes_value, 
       aes(x = year, y = estimate, group = 1)) + 
  geom_ribbon(
    aes(ymax = estimate + moe, ymin = estimate - moe), 
    fill = "navy",
    alpha = 0.4) + 
  geom_line(color = "navy") + 
  geom_point(color = "navy", size = 2) + 
  theme_minimal(base_size = 12) + 
  scale_y_continuous(labels = label_dollar(
    scale = .001, 
    suffix = "k")) + 
  labs(title = "Median home value in Deschutes County, OR",
       x = "Year",
       y = "ACS estimate",
       caption = "Shaded area represents margin of error around the ACS estimate")
```

## 4.5 Exploring age and sex structure with population pyramids

-   Population pyramids visualize population proportions on the x-axis

    -   age cohort on the y-axis

    -   sex as a categorical variable mirrored across the central axis

### Preparing data from Pop Estimates API

-   Using Utah as a demo case

```{r utah-demo}
utah <- get_estimates(
  geography = "state",
  state = "UT",
  product = "characteristics",
  breakdown = c("SEX", "AGEGROUP"),
  breakdown_labels = TRUE,
  year = 2019
)

utah
```

-   We won't need `"Both sexes"` or `"All ages"`

    -   we use a NOT EQUAL conditional in the filter (`!=`) to remove rows where SEX has "Both sexes" values

-   We need to isolate 5 year range bands from the other rows which will not be used

    -   We use the regex expression `"^Age"` below to select all values of `AGEGROUP` that start with the word `Age`, as these are the 5 year range rows

-   We mutate values where `SEX` equals `"Male"` to be negative, so that they can be mirrored across a central axis on 0.

```{r utah-tidying}
utah_filtered <- filter(utah, str_detect(AGEGROUP, "^Age"),
                        SEX != "Both sexes") %>% 
  mutate(value = ifelse(SEX == "Male", -value, value))
```

### Designing and styling the pop pyramid

We can make a rough draft with the following code

-   Note:

    -   x axis has the value; negative for males, positive for females

    -   y axis has the age bands in 5 year increments

    -   bars are filled with color based on the categorical value of "Male" or "Female" in SEX

```{r utah-design}
ggplot(utah_filtered, aes(x = value,  y = AGEGROUP, fill = SEX)) +
  geom_col()
```

We can clean this up for clarity and aesthetics

-   We will remove redundancy in labels

-   We will adjust the scale of axis ticks for easier interpretability

```{r clean-pyramid}
utah_pyramid <- ggplot(utah_filtered,
                       aes(x = value,
                           y = AGEGROUP,
                           fill = SEX)) + 
  geom_col(width = 0.95, alpha = 0.75) +
  theme_minimal(base_family = "Verdana", 
                base_size = 12) +
  scale_x_continuous(
    labels = ~number_format(scale = .001, suffix = "k")(abs(.x)),
                            limits = 140000 * c(-1,1)
                            ) +
  scale_y_discrete(labels = ~str_remove_all(.x, "Age\\s|\\syears")) +
  scale_fill_manual(values = c("darkred", "navy")) +
  labs(x = "",
       y = "2019 Census Bureau population estimate",
       title = "Population structure in Utah",
       fill = "",
       caption = "Data source: US Census Bureau\npopulation estimates & tidycensus R package")

utah_pyramid
```

## 4.6 Visualizing group-wise comparisons

-   faceted plots (aka small multiples) allow for the visualization of multiple sub-groups of data in such a way that they can be compared to each other, side by side

-   We will use census tract geography and median home values in Clackamas, Columbia, Marion, Multnomah, Washington, and Yamhill counties, Oregon.

```{r Oregon-area-mhv}
housing_val <- get_acs(
  geography = "tract",
  variables = "B25077_001",
  state = "OR",
  county = c("Multnomah", "Clackamas",
             "Washington", "Yamhill",
             "Marion", "Columbia"),
  year = 2020
)

housing_val
```

-   `NAME` can be split into several useful columns using `separate()`

```{r}
housing_val2 <- separate(
  housing_val,
  NAME,
  into = c("tract", "county", "state"),
              sep = ", "
)

housing_val2
```

-   tidyverse lets us use a series of pipes, groupings, and summaries to do group-wise comparison across all 6 counties:

```{r}
housing_val2 %>% 
  group_by(county) %>% 
  summarize(min = min(estimate, na.rm = TRUE),
            mean = mean(estimate, na.rm = TRUE),
            median = median(estimate, na.rm = TRUE),
            max = max(estimate, na.rm = TRUE))
```

-   We can now plot the (statistical) distribution of values

    -   We'll see a simple density plot of all values, and then the use of `facet_wrap()` to make a group of density plots for each county

```{r total-distribution}
ggplot(housing_val2, aes(x = estimate)) + 
  geom_density()
```

-   We can do an overlay across the variables using fill

```{r}
ggplot(housing_val2, aes(x = estimate, fill = county)) + 
  geom_density(alpha = 0.3)
```

-   `facet_wrap()` instead breaks each overlayed plot into its own individual plot

```{r}
ggplot(housing_val2, aes(x = estimate)) + 
  geom_density(fill = "darkgreen", color = "darkgreen", alpha = 0.5) +
  facet_wrap(~county) + 
  scale_x_continuous(labels = dollar_format(scale = 0.000001,
                                           suffix = "m")) +
  theme_minimal(base_size = 14) +
  theme(axis.text.y = element_blank(),
        axis.text.x = element_text(angle = 45)) +
  labs(x = "ACS estimate",
       y = "",
       title = "Median home values by Census tract, 2015-2019 ACS")
```

## 4.7 Advanced visualization with ggplot2 extensions

-   there are a variety of ggplot2 extensions developed by folks outside the ggplot2 core team

    -   examples can be found [here](https://exts.ggplot2.tidyverse.org/)

-   The author walks us through 4:

    -   **ggridges** which generates ridgeline plots - a density plot visualization with plots overlapping each other as though silhouetted ridges (also called a "joyplot" in reference to the iconic Joy Division album cover)

```{r}
library(ggridges)

ggplot(housing_val2, aes(x = estimate,
                         y = county)) +
  geom_density_ridges() +
  theme_ridges() +
  labs(x = "Median home value: 2016-2020 ACS estimate",
       y = "") +
  scale_x_continuous(labels = label_dollar(scale = .000001, suffix = "m"),
                     breaks = c(0, 500000, 1000000)) +
  theme(axis.text.x = element_text(angle = 45))
```

-   **ggbeeswarm** which generates beeswarm plots - clouds of points jittered/dispersed to show overall density

    -   can be useful for visualizing multiple variables on a chart

```{r}
library(ggbeeswarm)

ny_race_income <- get_acs(
  geography = "tract",
  state = "NY",
  county = c("New York", "Bronx", "Queens", "Richmond", "Kings"),
  variables = c(White = "B03002_003",
                Black = "B03002_004",
                Asian = "B03002_006",
                Hispanic = "B03002_012"),
  summary_var = "B19013_001",
  year = 2020
) %>% 
  group_by(GEOID) %>% 
  filter(estimate == max(estimate, na.rm = TRUE)) %>% 
  ungroup() %>% 
  filter(estimate != 0)

ggplot(ny_race_income, aes(x = variable, 
                           y = summary_est,
                           color = summary_est)) +
  geom_quasirandom(alpha = 0.5) +
  coord_flip() +
  theme_minimal(base_size = 13) +
  scale_color_viridis_c(guide = "none") +
  scale_y_continuous(labels = label_dollar()) +
  labs(x = "Largest group in Census tract",
       y = "Median household income",
       title = "Household income distribution by largest racial/ethnic group",
       subtitle = "Census tracts, New York City",
       caption = "Data source: 2016-2020 ACS")
```

-   **geofacet** plots for faceted representation of information in a spatial format without more complex geospatial tools

    -   "The key is to use a column that can map correctly to information in the geofaceted grid you are using"\

```{r}
library(geofacet)

us_pyramid_data <- get_estimates(
  geography = "state",
  product = "characteristics",
  breakdown = c("SEX", "AGEGROUP"),
  breakdown_labels = TRUE,
  year = 2019
) %>%
  filter(str_detect(AGEGROUP, "^Age"),
         SEX != "Both sexes") %>%
  group_by(NAME) %>%
  mutate(prop = value / sum(value, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(prop = ifelse(SEX == "Male", -prop, prop))

ggplot(us_pyramid_data, aes(x = prop, y = AGEGROUP, fill = SEX)) + 
  geom_col(width = 1) + 
  theme_minimal() + 
  scale_fill_manual(values = c("darkred", "navy")) + 
  facet_geo(~NAME, grid = "us_state_with_DC_PR_grid2",
            label = "code") + 
  theme(axis.text = element_blank(),
        strip.text.x = element_text(size = 8)) + 
  labs(x = "", 
       y = "", 
       title = "Population Structure\nBy Age and Sex", 
       fill = "", 
       caption = "Data source: US Census Bureau\npopulation estimates & tidycensus R package")
```

-   **plotly** - a library for interactive visualization drawing on the **htmlwidgets** package and the Plotly JavaScript data visualization library
    -   with **plotly**'s `ggplotly()` function, you can make any existing `ggplot()` object into an interactive chart\

```{r message=TRUE, warning=TRUE}
library(plotly)

#ggplotly(utah_pyramid)
```

## 4.8 Learning more about visualization

Author recommends the following readings:

-   Munzer. 2014. *Visualization Analysis and Design.* CRC Press. <https://doi.org/10.1201/b17511>

-   Knaflic. 2015. "Storytelling with Data," October. <https://doi.org/10.1002/9781119055259>

-   Healy. 2019. *Data Visualization: A Practical Introduction.* Princeton University Press. <https://socviz.co/>

-   Wilke. 2019. *Fundamentals of Data Visualization.* O'Reilly Media. <https://clauswilke.com/datavis/>

## 4.9 Exercises

-   Choose a different variable in the ACS and/or a different location and create a margin of error visualization of your own.

```{r}
years <- 2005:2019
names(years) <- years

la_value <- map_dfr(years, ~{
  get_acs(
    geography = "county",
    variables = "B25077_001",
    state = "CA",
    county = "Los Angeles",
    year = .x,
    survey = "acs1"
  )
}, .id = "year")
```

```{r}
ggplot(la_value, aes(x = year, y = estimate, group = 1)) + 
  geom_ribbon(aes(ymax = estimate + moe, ymin = estimate - moe), 
              fill = "navy",
              alpha = 0.4) + 
  geom_line(color = "navy") + 
  geom_point(color = "navy", size = 2) + 
  theme_minimal(base_size = 12) + 
  scale_y_continuous(labels = label_dollar(scale = .001, suffix = "k")) + 
  labs(title = "Median home value in Los Angeles County, CA",
       x = "Year",
       y = "ACS estimate",
       caption = "Shaded area represents margin of error around the ACS estimate")
```

-   Modify the population pyramid code to create a different, customized population pyramid. You can choose a different location (state or county), different colors/plot design, or some combination!

```{r}
la_age_sex <- get_estimates(
  geography = "county",
  state = "CA",
  county = "Los Angeles",
  product = "characteristics",
  breakdown = c("SEX", "AGEGROUP"),
  breakdown_labels = TRUE,
  year = 2019
)

la_age_sex_filtered <- filter(la_age_sex, str_detect(AGEGROUP, "^Age"),
                        SEX != "Both sexes") %>% 
  mutate(value = ifelse(SEX == "Male", -value, value))

la_pyramid <- ggplot(la_age_sex_filtered,
                       aes(x = value,
                           y = AGEGROUP,
                           fill = SEX,
                           text = paste0(
                             "POPULATION: ",
                             label_comma()
                               (abs(value))
                               )
                             )
                           ) + 
  geom_col(width = 0.90, alpha = 0.75) +
  theme_minimal(base_family = "Verdana", base_size = 12) +
  scale_x_continuous(
    labels = ~label_number(scale = 0.001, suffix = "k")(abs(.x)),
    breaks = c(-400000, -200000, 200000, 400000),
    limits = 500000 * c(-1, 1)) +
  scale_y_discrete(labels = ~str_remove_all(.x, "Age\\s|\\syears")) +
  scale_fill_manual(values = c("darkred", "navy")) +
  labs(x = "",
       y = "2019 Census Bureau population estimate",
       title = "Population structure\nLos Angeles County, CA",
       fill = "",
       caption = "Data source: US Census Bureau\npopulation estimates & tidycensus R package")


la_pyramid # %>% ggplotly(tooltip = c("AGEGROUP", "SEX", "text"))
```
